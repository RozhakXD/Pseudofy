import requests, uuid, re
from requests.exceptions import RequestException
from fake_useragent import UserAgent

def fetch_pseudocode(question: str, language: str) -> tuple:
    with requests.Session() as session:
        session.headers = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate",
            "Cache-Control": "max-age=0",
            "Connection": "keep-alive",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-User": "?1",
            "Host": "www.blackbox.ai",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Site": "same-origin",
            "Upgrade-Insecure-Requests": "1",
            "User-Agent": f"{UserAgent.random}"
        }
        response = session.get('https://www.blackbox.ai/agent/Pseudofyk2iogPd', allow_redirects=True, verify=True)

        sessionId = session.cookies.get_dict().get('sessionId', None)

        data = {
            "messages": [
                {
                    "id": "ngWed8m7zBnTAb3BdFxZ7",
                    "content": f"\"{question}\" - {language}",
                    "role": "user"
                }
            ],
            "id": "ngWed8m7zBnTAb3BdFxZ7",
            "previewToken": None,
            "userId": f"{uuid.uuid4()}",
            "codeModelMode": True,
            "agentMode": {
                "mode": True,
                "id": "Pseudofyk2iogPd",
                "name": "Pseudofy"
            },
            "trendingAgentMode": {},
            "isMicMode": False,
            "isChromeExt": False,
            "validated": "00f37b34-a166-4efb-bce5-1312d87f2f94",
            "githubToken": None
        }

        session.headers.update(
            {
                "Referer": "https://www.blackbox.ai/agent/Pseudofyk2iogPd",
                "Content-Length": f"{len(str(data))}",
                "Content-Type": "application/json",
                "Accept": "*/*",
                "Origin": "https://www.blackbox.ai",
                "Sec-Fetch-Dest": "empty",
                "Sec-Fetch-Mode": "cors",
                "Cookie": f"sessionId={sessionId};"
            }
        )
        response2 = session.post('https://www.blackbox.ai/api/chat', json=data, allow_redirects=False, verify=True, timeout=10)
        if '```' in response2.text:
            response_strings = re.search(r'```(.*?)```', response2.text, re.DOTALL)
            if response_strings:
                result = response_strings.group(1).strip()
                return ('success', result)
            return ('error', 'No valid pseudocode found in the response!')
        elif len(response2.text) < 10:
            return ('error', 'Received an empty response!')
        elif '<!DOCTYPE html>' in str(response2.text) or '<html>' in str(response2.text):
            return ('error', 'Received an HTML response instead of pseudocode!')
        elif 'Generated by BLACKBOX.AI' in str(response2.text):
            return ('error', 'Unexpected response format!')
        else:
            return ('success', response2.text)

def main_marker(question: str, language: str) -> tuple:
    looping = 0
    while looping < 3:
        try:
            result = fetch_pseudocode(question, language)
            return result
        except RequestException as e:
            looping += 1
            continue
    return ('error', 'Failed to fetch pseudocode after 3 attempts!')